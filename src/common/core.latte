
var coop = require('coop');

var
CARDS = "A23456789TJQK",
SUITS = "DHSC",
DECK = cprod(CARDS.split(''), SUITS.split('')).map(c => c.join(''));

module.exports = function (P) {
	var core = {};

	core.DECK = DECK;

	var Deck = core.Deck = new coop.Class({
		initialize: function (data) {
			this.cards = P.array(data.cards);
		},

		getCards: function () {
			return P.get(this.cards);
		},

		getInventory: function () {
			var cards = this.getCards();
			if ( this.cardTypes ) {
				return cards.map(c => { return { card: c, type: this.cardTypes[c[0]] } })
			} else {
				return cards.map(c => { return { card: c, type: c } });
			}
		},

		getInventorySets: function () {
			// TODO: wildcards
			return getSets(
				sortByKey(this.getInventory(), i => i.type)
			).map(a => [
				a.map(i => i.card),
				a.map(i => i.type).join('')
			]);
		},

		getMatchingInventory: function (patt) {
			var r = new RegExp('^' + patt + '$');
			return this.getInventorySets()
				.filter(s => !!r.exec(s[1]));
		},
		getMatchingCardSets: function (patt) {
			return this.getMatchingInventory(patt).map(i => i[0]);
		},

		hasInventory: function (patt) {
			return !!this.getMatchingInventory(patt).length;
		},

		consume: function (game, actor, patt, data) {
			var me = this;
			return do {
				if ( !data.useCards ) {
					data.useCards =<< actor.chooseCards(game, me.getMatchingCardSets(patt), data);
				}

				for ( c of data.useCards ) {
					me.cards.remove(c);

					if ( !data.noCardReturn ) {
						me.returnCard(c);
					}
				};
			}
		}
	})


	core.Game = new coop.Class([Deck], {

		initialize: function (data) {
			console.log('init game');

			this.super(data);

			this.players = P.array(data.players);
			this.returnedCards = P.array(data.returnedCards || []);
		},

		deal: function () {
			var cards = P.get(this.returnedCards),
				players = P.get(this.players).filter(p => p.isAlive());

			cards = shuffle(cards);

			cards.forEach((c,i) => {
				players[i % players.length].cards.push(c);
			});

			this.returnedCards = P([], {}, this.returnedCards);
		},

		returnCard: function (c) {
			this.returnedCards.push(c);
		},

		addPlayer: function (player) {
			this.players.push(player)
		},

		host: function () {
			var me = this;
			return do {
				<< me.waitForStart();

				var players = P.get(me.players);

				if ( players.length == 0 ) {
					throw new Error('No players!')
				}

				<< me.hostRound(players);

				return me.host();
			}
		},

		hostRound: function (players) {
			var me = this;
			return do {
				for ( p of players ) {
					<< me.stage(p, 'turn', {});
				}
			}
		},

		getAvailableActions: function (actor, stage) {
			return this.actions.filter(a => a.isAvailable(this, actor, stage))
		}

	});

	core.Player = Deck.derived({
		initialize: function (data, game) {
			this.super(data);
			this.game = game;
			this.name = data.name;
		},

		consume: function (game, patt, data) {
			return this.super(game, this, patt, data);
		},
		perform: function (game, action, data, stage) {
			return action.perform(game, this, data, stage);
		},
		returnCard: function (c) {
			this.game.returnCard(c);
		},

		getAvailableActions: function (stage) {
			return this.game.getAvailableActions(this, stage);
		},

		toString: function () {
			return this.name;
		}
	});

	core.Action = new coop.Class({

		isAvailable: function (game, actor, stage) {

			if ( this.stages.indexOf(stage) < 0 ) {
				return false;
			}

			var requires = this.requires || this.uses;
			if ( requires ) {
				if (!actor.hasInventory(requires)) {
					return false;
				}
			}

			return true;
		},

		perform: function (game, actor, data, stage) {
			return do {
				if ( !this.isAvailable(game, actor, stage) ) {
					throw new Error("Action not available!");
				}

				if ( this.uses ) {
					<< actor.consume(game, this.uses, data);
				}
			}
		},

		toString: function () {
			return this.name;
		}
	})

	core.PlayerAction = core.Action.derived({
		perform: function (game, actor, data) {
			return this.super.apply(this, arguments).then(() => do {
				if ( !data.playerActionSubject ) {
					data.playerActionSubject =<< game.getActionSubject(this, actor);
				}
			});
		}
	})

	return core;
}

function sortByKey(array, fn) {
    return array.sort(function(a, b) {
        var x = fn(a); var y = fn(b);
        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    });
}
function getSets(arr) {
	var res = [[]];
    for ( var i = 0; i < arr.length; i++ ) {
    	for ( var j = i + 1; j <= arr.length; j++ ) {
    		res.push(arr.slice(i, j));
    	}
    }
    return res;
}
function shuffle(o){
    for(var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
    return o;
};
function cprod() {
  return Array.prototype.reduce.call(arguments, function(a, b) {
    var ret = [];
    a.forEach(function(a) {
      b.forEach(function(b) {
        ret.push(a.concat([b]));
      });
    });
    return ret;
  }, [[]]);
}
